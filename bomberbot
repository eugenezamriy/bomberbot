#!/usr/bin/env python
# -*- mode:python; coding:utf-8; -*-
# created: 23.06.2010 21:34
# description: BomberBot server.


import getopt
import os
import sys
from Queue import Queue

from bomberlib.dispatcher import Dispatcher
import bomberlib.db as db
from bomberlib.logger import debug, error
from bomberlib.server import Server


def show_usage():
    for l in ("BomberBot server\n",
              "  -d, --debug                enable debug output",
              "  -h, --help                 shows this message",
              "  -a, --address              bind server socket to address",
              "  -p, --port                 listen on specified port (default 41000)"):
        sys.stdout.write("%s\n" % l)


def main(sys_args):
    debug = False
    address = ""
    port = 41000
    #
    try:
        opts, args = getopt.getopt(sys_args, "dha:p:", ["debug", "help", "address=", "port="])
    except getopt.GetoptError, e:
        error(str(e))
        show_usage()
        return 1
    for opt, arg in opts:
        if opt in ("-d", "--debug"):
            debug = True
        elif opt in ("-h", "--help"):
            show_usage()
            return 0
        elif opt in ("-a", "--address"):
            # TODO: validation must be improved
            address = arg
        elif opt in ("-p", "--port"):
            # TODO: validation must be improved
            try:
                port = int(arg)
            except ValueError, e:
                error("Wrong port value: %s" % str(e))
                return 1
    # init database
    if os.path.exists("bomberbot.db"):
        os.remove("bomberbot.db")
    db.init_db("sqlite:///bomberbot.db", debug)
    # incoming messages queue (timestamp, socket id, message)
    in_queue = Queue(maxsize=1000)
    # outgoing messages queue (socket id, message)
    out_queue = Queue(maxsize=1000)
    disp = Dispatcher(in_queue, out_queue)
    disp.daemon = True                            # enter daemon mode to allow process closing
    disp.start()
    srv = Server(address, port, in_queue, out_queue)
    try:
        srv.serve()
    except KeyboardInterrupt:
        pass
    finally:
        for sock in srv.main_socks:
            sock.close()


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
